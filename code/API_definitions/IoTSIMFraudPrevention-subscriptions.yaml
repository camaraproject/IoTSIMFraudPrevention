openapi: 3.0.3
info:
  title:  IoT SIM Fraud Prevention Subscriptions
  description: |
   API to create, with SIM card binding and unbinding and regional restriction
    
    # Introduction
    
    With this API, we need to subscribe to a SIM card binding service or regional restriction service first. Then, customers could use query api to query the binding information which returns match status. Also, customers could use bind api to bind the SIM card and IMEI together. When the IMEI reported in the message doesn't match the binding one, the network serices will be blocked automatically. When the IMEI reported in the message matches the binding one, the network service of the SIM card will be restored.
    The ability provided by the regional restriction is similar to that of SIM card binding, but what's bound is the regional information (the regional information is mapped to the corresponding region based on the base station ID reported in the message).
    
    # Relevant terms and definitions

    * **SIM card**: The SIM (subscriber identity module) card here stands for IoT（internet of things）network card.

    * **binding**: Machine card binding is a security management mechanism for IoT network cards, aimed at preventing them from being used for other purposes. By binding the SIM card to specific terminal devices, it ensures that the card can only be used on designated devices, thereby enhancing security.
    
    * **Device**: A device refers to any physical entity that can connect to a network and participate in network communication.
    
    * **IMEI**: IMEI stands for International Mobile Equipment Identity. It is a unique 15-digit number assigned to every mobile phone or cellular device, which is used to identify the device on a mobile network. The IMEI serves as a crucial identifier for tracking and managing mobile devices, particularly in cases of theft or loss. It can also be utilized for validating whether a device is authorized to connect to a network.
      
    # API Functionality
    
    The API defines one service endpoint:

    - `POST /subscribe` This API allows enterprise customers to subscribe to risk control information related to IoT SIM cards. When the device or region bound to the IoT card changes, the customer can be notified in a timely manner through the callback address registered by the customer, making it convenient for the customer to identify endpoint risks in a timely manner.
      - It is mandatory in the subscription to provide the event type for which the client would like to subscribe.
        - Following event ``types`` are managed for this API:
        - ``IMEI_CHANGE`` The triggle event when imei of device was changed

        - ``AREA_CHANGE`` The triggle event when area of device was changed
        - Note: Additionally to these list, ``SUBSCRIBE_END`` notification `type` is sent when the subscription ends. This notification does not require dedicated subscription.
          - It is used when:
             - the subscription expire time (optionally set by the requester) has been reached
             - the maximum number of subscription events (optionally set by the requester) has been reached
             - the subscription was deleted by the requester
             - the Access Token `sinkCredential` (optionally set by the requester) expiration time has been reached
             - the API server has to stop sending notification prematurely
      - Notification callback
        This endpoint describes the event notification received on subscription listener side when the event occurred.
        As for subscription, detailed description of the event notification is provided in the CAMARA API design guideline document.
      - _**WARNING**: This callback endpoint must be exposed on the consumer side as `POST /{$request.body#/sink}`.
      Developers may provide a callback URL on which notifications regarding geofencing can be received from the service provider.
      If an event occurs the application will send events to the provided webhook - 'sink'._

    To call this endpoint, the API consumer must first obtain a valid access token from the token endpoint, which is then passed as an Authorization header. When a 2-legged access token is used, the API consumer must also pass at least one of the available IoT subscription identifiers in the body of the request.
    The type of communication function is also needed in the body of the request.
    


  
    
    ## Error handling

    Errors may be returned for the following reasons. Note that this list is not exhaustive.

    `401 UNAUTHENTICATED`or `401 AUTHENTICATION_REQUIRED`:
    - The access token is not a valid access token for the API provider
    - The access token was valid but has now expired

    `400 INVALID_ARGUMENT`:
    - The API request is not compliant with this OAS definition

    `400 OUT_OF_RANGE`:
    - A parameter value in the API request is outwith the range documented in this OAS definition for that parameter

    `404 IDENTIFIER_NOT_FOUND`:
    - The device identified by the `device` object in the request is not managed by the API provider

    `403 PERMISSION_DENIED`:
    - The access token does not have the required scope for the endpoint being called
    - The end user has not consented to the API consumer getting access to the device identifier information (2-legged access token only)

    `422 IDENTIFIER_MISMATCH`:
    - Multiple parameters have been provided in the `device` object, and these do not identify the same device

    `422 UNSUPPORTED_IDENTIFIER`:
    - A parameter provided in the `device` object is not supported by this implementation (e.g. `networkAccessIdentifier`)

    `422 UNNECESSARY_ACTIVATION`:
    `422 UNNECESSARY_DEACTIVATION`:
    - The specified communication function of the `device` has already be activated or deactivated but the corresponding operation type parameter was still provided

    `422 MISSING_IDENTIFIER`:
    `422 UNNECESSARY_IDENTIFIER`:
    - See the section "Identifying the device from the access token" below

    `429 QUOTA_EXCEEDED`:
    - The API consumer has used up the quota of API requests that they were allocated for this API

    `429 TOO_MANY_REQUESTS`:
    - The rate at which the API consumer is sending requests has exceeded that allowed by the API provider. Try again later.

    Other errors may be returned by implementations. These will have their usual meaning for the associated HTTP status codes.

    # Further info and support

    ## Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    ## Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the optional `device` object, which therefore MUST be provided.

    - When a three-legged access token is used however, this optional identifier MUST NOT be provided, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ### Error handling:
    - If the subject cannot be identified from the access token and the optional `device` object is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.

    - If the subject can be identified from the access token and the optional `device` object is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same device is identified by these two methods, as the server is unable to make this comparison.

    (FAQs will be added in a later version of the documentation)


  version: wip
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-camara-commonalities: 0.5
externalDocs:
  description: Project documentation at CAMARA
  url: https://github.com/camaraproject/DeviceLocation
servers:
  - url: "{apiRoot}/iot-sim-fraud-prevention/wip"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
paths:
  /subscribe:
    post:
      tags:
        - Subscription sim card fraud prevention
      summary: Subscription device's IMEI or region change
      description: |
        This API allows enterprise customers to subscribe to risk control information related to IoT SIM cards. When the device or region bound to the IoT card changes, the customer can be notified in a timely manner through the callback address registered by the customer, making it convenient for the customer to identify endpoint risks in a timely manner.
      operationId: SubscribeFraudPrevention
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscribeFraudPreventionRequest"
            examples:
              INPUT_IPV4_ADDRESS:
                summary: Subscription For One Device By IPv4 Address
                description: Use the IPv4 address of a device for subscription operations
                value:
                  config:
                    subscriptionExpireTime: "2024-03-22T05:40:58.469Z"
                    initialEvent: true
                    subscriptionMaxEvents: 10
                    subscriptionDetail:
                        device:
                            ipv4Address: 
                              publicAddress: "203.0.113.0"
                              publicPort: 59765
                  types:
                    - "IMEIBIND"
                  sink: "http://notificationSendServer12.supertelco.com"
                  protocol: "HTTP"
                  sinkCredential: "PLAIN"
              INPUT_IPV6_ADDRESS:
                summary: Subscription For One Device By IPV6 Address
                description: Use the IPv6 address of a device for subscription operations
                value:
                  config:
                    subscriptionExpireTime: "2024-03-22T05:40:58.469Z"
                    initialEvent: true
                    subscriptionMaxEvents: 10
                    subscriptionDetail:
                        device:
                            ipv6Address: "2001:db8:85a3:8d3:1319:8a2e:370:7344"
                  types:
                    - "IMEIBIND"
                  sink: "http://notificationSendServer12.supertelco.com"
                  protocol: "HTTP"
                  sinkCredential: "PLAIN"
              INPUT_PHONE_NUMBER:
                summary: Subscription For One Device By Device Number
                description: Use a device's number for subscription operation
                value:
                  config:
                    subscriptionExpireTime: "2024-03-22T05:40:58.469Z"
                    initialEvent: true
                    subscriptionMaxEvents: 10
                    subscriptionDetail:
                        device:
                            phoneNumber: "+123456789"
                  types:
                    - "IMEIBIND"
                  sink: "http://notificationSendServer12.supertelco.com"
                  protocol: "HTTP"
                  sinkCredential: "PLAIN"
              INPUT_NETWORK_ACCESS_IDENTIFIER:
                summary: Subscription For One Device By Network Access Identification
                description: Use a device's network access identifier for subscription operations
                value:
                  config:
                    subscriptionExpireTime: "2024-03-22T05:40:58.469Z"
                    initialEvent: true
                    subscriptionMaxEvents: 10
                    subscriptionDetail:
                        device:
                            networkAccessIdentifier: "123456789@domain.com"
                  types:
                    - "IMEIBIND"
                  sink: "http://notificationSendServer12.supertelco.com"
                  protocol: "HTTP"
                  sinkCredential: "PLAIN"
              INPUT_CONFIG:
                summary: Subscription For One Device By 3 Legged Token
                description: Use a 3 Legged Token for subscription operations
                value:
                  config:
                    subscriptionExpireTime: "2024-03-22T05:40:58.469Z"
                    initialEvent: true
                    subscriptionMaxEvents: 10
                  types:
                    - "IMEIBIND"
                  sink: "http://notificationSendServer12.supertelco.com"
                  protocol: "HTTP"
                  sinkCredential: "PLAIN"
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              summary: "notifications callback"
              description: |
                Important note: This endpoint will be implemented by API users.
                Whenever an IMEI or area change event occurs, the server will call this endpoint.
              operationId: postNotification
              parameters:
                - $ref: "#/components/parameters/x-correlator"
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/NoticeEvent"
                    examples:
                      AREA_CHANGE:
                        description: The triggle event when area of device was changed
                        value:
                          id: "123655"
                          type: "AREA_CHANGE"
                          datacontenttype: "application/json"
                          time: "2023-03-22T05:40:23.682Z"
                          data:
                            subscriptionId: "987654321"
                            area:
                              areaType: "CIRCLE"
                              center:
                                latitude: "50.735851"
                                longitude: "7.10066"
                              radius: 2000
                            device:
                                phoneNumber: "+123456789"
                      IMEI_CHANGE:
                        description: The triggle event when imei of device was changed
                        value:
                          id: "123655"
                          type: "IMEI_CHANGE"
                          datacontenttype: "application/json"
                          time: "2023-03-22T05:40:23.682Z"
                          data:
                            subscriptionId: "987654321"
                            imei: "35-209900-176148-1"
                            device:
                                phoneNumber: "+123456789"
              responses:
                "204":
                  description: Successful notification.
                  headers:
                    x-correlator:
                      $ref: "#/components/headers/x-correlator"
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "404":
                  $ref: "#/components/responses/Generic404"
                "410":
                  $ref: "#/components/responses/Callback410"
                "429":
                  $ref: "#/components/responses/Generic429"
      responses:
        "201":
          description: Created (Successful creation of subscription).
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "202":
          description: |
            The result of subscription machine card binding or region restriction change events
          headers:
            x-correlator:
              $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscribeFraudPreventionResponseAsync"
              examples:
                RESULT_SUBSCRIPTION_ID:
                  summary: subscription result
                  description: |
                    The result of subscription device's IMEI or region change 
                  value:
                    subscriptionId: "1119920371"
        "400":
          $ref: "#/components/responses/SubscribeBadRequest400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "422":
          $ref: "#/components/responses/Subscribe422"
        "429":
          $ref: "#/components/responses/Generic429"
      security:
        - openId:
            - device-imei-arealimit:subscription
components:
  securitySchemes:
    openId:
      description: OpenID Connect authentication
      type: openIdConnect
      openIdConnectUrl: https://example.org/.well-known/openid-configuration
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]{0,55}$
  schemas:
    NoticeEvent:
      description: The notification callback.
      required:
        - id
        - type
        - time
        - data
      properties:
        id:
          type: string
          description: Identifier of this event, that must be unique in the source context.
        type:
          $ref: "#/components/schemas/NotificationEventType"
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding, must be "application/json" for Notice APIs'
          enum:
            - application/json
        data:
          type: object
          description: Event details payload described in each Notice API and referenced by its type.
        time:
          $ref: "#/components/schemas/DateTime"
    DateTime:
      type: string
      format: date-time
      description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
      example: "2018-04-05T17:31:00Z"
    NotificationEventType:
      type: string
      description: |
        IMEI_CHANGE - Event triggered when the device area has changed

        AREA_CHANGE - Event triggered when the device imei has changed

      enum:
        - IMEI_CHANGE
        - AREA_CHANGE

    Subscription:
      description: Represents a event-type subscription.
      type: object
      required:
        - sink
        - protocol
        - config
        - types
        - id
        - startsAt
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: uri
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription.
          type: array
          items:
            type: string
          example:
            - IMEIBIND
        config:
          $ref: "#/components/schemas/Config"
        id:
          type: string
          description: The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).
          example: "1119920371"
        startsAt:
          type: string
          format: date-time
          description: |
            Date when the event subscription will begin/began
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          example: "2023-07-03T12:27:08.312Z"
        expiresAt:
          type: string
          format: date-time
          description: |
            Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has specific policy about that.
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          example: "2023-07-03T12:27:08.312Z"
        status:
          type: string
          description: |-
            Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:
              - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.
              - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.
              - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.
              - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.
              - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept).
          enum:
            - ACTIVATION_REQUESTED
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - DELETED
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionResponse"
          MQTT3: "#/components/schemas/MQTTSubscriptionResponse"
          MQTT5: "#/components/schemas/MQTTSubscriptionResponse"
          AMQP: "#/components/schemas/AMQPSubscriptionResponse"
          NATS: "#/components/schemas/NATSSubscriptionResponse"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionResponse"
        
    SubscribeFraudPreventionResponseAsync:
      description: Response for an event-type subscription request managed asynchronously (Creation or Deletion).
      type: object
      properties:
        subscriptionId:
          type: string
          description: The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).
          example: "1119920371"
        
      required:
        - subscriptionId
    SubscribeFraudPreventionRequest:
      description: The request for creating an event-type event subscription.
      type: object
      required:
        - sink
        - protocol
        - config
        - types
      properties:
        config:
          $ref: "#/components/schemas/Config"
        types:
          description: |
            Camara Event types which are eligible to be delivered by this subscription.
            Note: As of now we enforce to have only event type per subscription.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: "#/components/schemas/SubscriptionType"
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: uri
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionRequest"
          MQTT3: "#/components/schemas/MQTTSubscriptionRequest"
          MQTT5: "#/components/schemas/MQTTSubscriptionRequest"
          AMQP: "#/components/schemas/AMQPSubscriptionRequest"
          NATS: "#/components/schemas/NATSSubscriptionRequest"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionRequest"
    Config:
      description: |
        Implementation-specific configuration parameters are needed by the subscription manager for acquiring events.
        In CAMARA we have predefined attributes like `subscriptionExpireTime`, `subscriptionMaxEvents`, `initialEvent`.
        Specific event type attributes must be defined in `subscriptionDetail`.
        Note: If a request is performed for several event types, all subscribed events will use the same `config` parameters.
      type: object
      required:
        - subscriptionDetail
      properties:
        subscriptionDetail:
          $ref: "#/components/schemas/SubscriptionDetail"
        subscriptionExpireTime:
          type: string
          format: date-time
          example: "2023-01-17T13:18:23.682Z"
          description: The subscription expiration time (in date-time format) requested by the API consumer.
        subscriptionMaxEvents:
          type: integer
          description: |
            Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends.
            Note on combined usage of `initialEvent` and `subscriptionMaxEvents`:
            If an event is triggered following `initialEvent` set to `true`, this event will be counted towards `subscriptionMaxEvents`.
          minimum: 1
          example: 5
        initialEvent:
          type: boolean
          description: |
            Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.
    SubscriptionDetail:
      description: The detail of the requested event subscription.
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
      required:
        - device
    SubscriptionType:
      type: string
      description: |
        The event type to be subscribed to in the current operation, such as AREALIMIT or IMEIBIND
      enum:
        - AREALIMIT
        - IMEIBIND
    Protocol:
      type: string
      enum: ["HTTP", "MQTT3", "MQTT5", "AMQP", "NATS", "KAFKA"]
      description: Identifier of a delivery protocol. Only HTTP is allowed for now.
      example: "HTTP"
    SinkCredential:
      type: object
      description: A sink credential provides authentication or authorization information necessary to enable delivery of events to a target.
      properties:
        credentialType:
          type: string
          description: |
            The type of the credential.
            Note: Type of the credential - MUST be set to ACCESSTOKEN for now
          enum:
            - PLAIN
            - ACCESSTOKEN
            - REFRESHTOKEN
      discriminator:
        propertyName: credentialType
        mapping:
          PLAIN: "#/components/schemas/PlainCredential"
          ACCESSTOKEN: "#/components/schemas/AccessTokenCredential"
          REFRESHTOKEN: "#/components/schemas/RefreshTokenCredential"
      required:
        - credentialType
    PlainCredential:
      type: object
      description: A plain credential as a combination of an identifier and a secret.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          required:
            - identifier
            - secret
          properties:
            identifier:
              description: The identifier might be an account or username.
              type: string
            secret:
              description: The secret might be a password or passphrase.
              type: string
    AccessTokenCredential:
      type: object
      description: An access token credential.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: |
                REQUIRED. An absolute (UTC) timestamp at which the token shall be considered expired.
                In the case of an ACCESS_TOKEN_EXPIRED termination reason, implementation should notify the client before the expiration date.
                If the access token is a JWT and registered "exp" (Expiration Time) claim is present, the two expiry times should match.
                It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
                Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
              example: "2023-07-03T12:27:08.312Z"
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
          required:
            - accessToken
            - accessTokenExpiresUtc
            - accessTokenType
    RefreshTokenCredential:
      type: object
      description: An access token credential with a refresh token.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: REQUIRED. An absolute UTC instant at which the token shall be considered expired.
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
            refreshToken:
              description: REQUIRED. An refresh token credential used to acquire access tokens.
              type: string
            refreshTokenEndpoint:
              type: string
              format: uri
              description: REQUIRED. A URL at which the refresh token can be traded for an access token.
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType
        - refreshToken
        - refreshTokenEndpoint
    QueryRequest:
      description: Request to query the IMEI binding of the device. According to the rules described, unBindType is required.
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
        queryType:
          $ref: "#/components/schemas/QueryType"
      required:
        - queryType
    QueryType:
      type: string
      description: |
        The type of query operation, Such as AREALIMIT or IMEIBIND
      enum:
        - AREALIMIT
        - IMEIBIND
    QueryFraudPreventionResponse:
      description: Base schema for query fraud prevention
      type: object
      properties:
        areaLimit:
          $ref: "#/components/schemas/AreaLimit"
        imeiBind:
          $ref: "#/components/schemas/ImeiBind"
    ImeiBind:
      description: Base schema for query imei bind
      type: object
      properties:
        bindImei:
          $ref: "#/components/schemas/BindImei"
        bindStatus:
          $ref: "#/components/schemas/BindStatus"
    BindImei:
      description: |
        IMEI (International Mobile Equipment Identity) is a 15 digit code used to uniquely identify a mobile device and plays a key role in the SIM card binding mechanism.
      type: string
    BindStatus:
      description: | 
        The IMEI binding status in SIM card binding refers to the association status between the device IMEI number recorded in the operator's network system and the SIM card (usually identified by ICCID). This state determines whether the device and SIM card are authorized to be used together.
      type: string
      enum:
        - BOUND
        - UNBOUND
    AreaLimit:
      description: Base schema for query area limit
      type: object
      properties:
        limitArea:
          $ref: "#/components/schemas/Area"
        areaLimitStatus:
          $ref: "#/components/schemas/AreaLimitStatus"
    AreaLimitStatus:
      description: | 
        The current status of regional restrictions
        RESTRICTED - The current device's area has been restricted from accessing the network
        UNRESTRICTED - The current device's area is not restricted from accessing the network
      type: string
      enum:
        - RESTRICTED
        - UNRESTRICTED
    Area:
      description: Base schema for all areas
      type: object
      properties:
        areaType:
          $ref: "#/components/schemas/AreaType"
        point:
          $ref: "#/components/schemas/Point"
      required:
        - areaType
      discriminator:
        propertyName: areaType
        mapping:
          CIRCLE: "#/components/schemas/Circle"

    AreaType:
      type: string
      description: |
        Type of this area.
        CIRCLE - The area is defined as a circle.
      enum:
        - CIRCLE

    Circle:
      description: Circular area
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          properties:
            center:
              $ref: "#/components/schemas/Point"
            radius:
              type: integer
              description: |
                Expected accuracy for the verification, in meters from `center`.
                Note: The area surface could be restricted locally depending on regulations. Implementations may enforce a larger minimum radius (e.g. 1000 meters).
              minimum: 1
              maximum: 200000
          required:
            - center
            - radius
      example:
        areaType: CIRCLE
        center:
          latitude: 50.735851
          longitude: 7.10066
        radius: 50000

    Point:
      type: object
      description: Coordinates (latitude, longitude) defining a location in a map
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      example:
        latitude: 50.735851
        longitude: 7.10066

    Latitude:
      description: Latitude component of a location
      type: number
      format: double
      minimum: -90
      maximum: 90
      example: 50.735851

    Longitude:
      description: Longitude component of location
      type: number
      format: double
      minimum: -180
      maximum: 180
      example: 7.10066
    UnbindType:
      type: string
      description: |
        The type of machine card binding being unbound in the current operation, Such as AREALIMIT or IMEIBIND
      enum:
        - AREALIMIT
        - IMEIBIND
    BindType:
      type: string
      description: |
        The type of machine card unbinding being bound in the current operation, Such as AREALIMIT or IMEIBIND
      enum:
        - AREALIMIT
        - IMEIBIND    
    UnBindDeviceImeiRequest:
      description: Request to unbind the IMEI binding of the device. According to the rules described, unBindType is required.
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
        unBindType:
          $ref: "#/components/schemas/UnbindType"
      required:
        - unBindType
    UnBindDeviceImeiResponse:
      description: Response to unbind device IMEI. Unbound is required and will tell you whether the current unbinding operation is successful or failed based on the rules described.
      type: object
      required:
        - unbound
      properties:
        unbound:
          type: string
          description: |
            Return a flag indicating whether unbinding was successful
    BindDeviceImeiRequest:
      description: Request to bind the IMEI binding of the device. According to the rules described, bindType is required.
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Device"
        bindType:
          $ref: "#/components/schemas/BindType"
      required:
        - bindType
    BindDeviceImeiResponse:
      description: Response to bind device IMEI. Bound is required and will tell you whether the current binding operation is successful or failed based on the rules described.
      type: object
      required:
        - bound
      properties:
        unbound:
          type: string
          description: |
            Return a flag indicating whether binding was successful

    Device:
      description: |
        End-user device able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE1: the API provider might support only a subset of these options. The API consumer can provide multiple identifiers to be compatible across different API providers. In this case the identifiers MUST belong to the same device
        NOTE2: as for this Commonalities release, we are enforcing that the networkAccessIdentifier is only part of the schema for future-proofing, and CAMARA does not currently allow its use. After the CAMARA meta-release work is concluded and the relevant issues are resolved, its use will need to be explicitly documented in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    ErrorInfo:
      description: Common schema for errors
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

  responses:
    BindBadRequest400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            Insufficient Device Parameters:
              description: Sufficient parameters must be provided to allow the target UE to be identified
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "At least one of phoneNumber, networkAccessIdentifier, ipv4Address and ipv6Address must be specified"
            Insufficient UnbindType Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "BindType must be specified"
            Inconsistent Device Properties:
              description: Device parameters provided identify different devices
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Multiple inconsistent device parameters specified"
            Invalid Network Access Identifier:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: networkAccessIdentifier"
            Invalid Phone Number:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: phoneNumber"
            Invalid IPv4 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv4Address"
            Invalid IPv6 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv6Address"
            Invalid Port Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid value: ipv4Address.publicPort"
            Invalid UnbindType Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of bindType can only be IMEIBIND,AREALIMIT"
    UnbindBadRequest400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            Insufficient Device Parameters:
              description: Sufficient parameters must be provided to allow the target UE to be identified
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "At least one of phoneNumber, networkAccessIdentifier, ipv4Address and ipv6Address must be specified"
            Insufficient UnbindType Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "UnbindType must be specified"
            Inconsistent Device Properties:
              description: Device parameters provided identify different devices
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Multiple inconsistent device parameters specified"
            Invalid Network Access Identifier:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: networkAccessIdentifier"
            Invalid Phone Number:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: phoneNumber"
            Invalid IPv4 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv4Address"
            Invalid IPv6 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv6Address"
            Invalid Port Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid value: ipv4Address.publicPort"
            Invalid UnbindType Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of unbindType can only be IMEIBIND,AREALIMIT"
    SubscribeBadRequest400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            Insufficient Device Parameters:
              description: Sufficient parameters must be provided to allow the target UE to be identified
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "At least one of phoneNumber, networkAccessIdentifier, ipv4Address and ipv6Address must be specified"
            Insufficient Types Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "SubscriptionType must be specified"
            Insufficient Sink Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Sink must be specified"
            Insufficient Protocol Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Protocol must be specified"
            Inconsistent Device Properties:
              description: Device parameters provided identify different devices
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Multiple inconsistent device parameters specified"
            Invalid Network Access Identifier:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: networkAccessIdentifier"
            Invalid Phone Number:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: phoneNumber"
            Invalid IPv4 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv4Address"
            Invalid IPv6 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv6Address"
            Invalid Port Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid value: ipv4Address.publicPort"
            Invalid SubscriptionType Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of SubscriptionType can only be IMEIBIND,AREALIMIT"
            Invalid Protocol Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of Protocol can only be HTTP, MQTT3, MQTT5, AMQP, NATS, KAFKA"
            Invalid Sink Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The sink field must be an accessible client address in order to notify the other end when an event occurs"
            Invalid SinkCredential Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of SinkCredential can only be PLAIN,ACCESSTOKEN or REFRESHTOKEN"
            Invalid Types Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of SinkCredential can only be IMEI_CHANGE,AREA_CHANGE"
            Out of range SubscriptionMaxEvents Value:
              value:
                status: 400
                code: OUT_OF_RANGE
                message: "The value of SubscriptionMaxEvents out of range"
    CallbackBadRequest400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            Insufficient Id Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Id must be specified"
            Insufficient Type Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Type must be specified"
            Insufficient Time Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Time must be specified"
            Insufficient Data Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Data must be specified"
            Insufficient Device Parameters:
              description: Sufficient parameters must be provided to allow the target UE to be identified
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "At least one of phoneNumber, networkAccessIdentifier, ipv4Address and ipv6Address must be specified"
            Insufficient SubscriptionId Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "SubscriptionId must be specified"
            Inconsistent Device Properties:
              description: Device parameters provided identify different devices
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Multiple inconsistent device parameters specified"
            Invalid Network Access Identifier:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: networkAccessIdentifier"
            Invalid Phone Number:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: phoneNumber"
            Invalid IPv4 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv4Address"
            Invalid IPv6 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv6Address"
            Invalid Port Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid value: ipv4Address.publicPort"
            Invalid Type Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of unbindType can only be IMEI_CHANGE,AREA_CHANGE"
    QueryBadRequest400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            Insufficient Device Parameters:
              description: Sufficient parameters must be provided to allow the target UE to be identified
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "At least one of phoneNumber, networkAccessIdentifier, ipv4Address and ipv6Address must be specified"
            Insufficient QueryType Parameters:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "QueryType must be specified"
            Inconsistent Device Properties:
              description: Device parameters provided identify different devices
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Multiple inconsistent device parameters specified"
            Invalid Network Access Identifier:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: networkAccessIdentifier"
            Invalid Phone Number:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: phoneNumber"
            Invalid IPv4 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv4Address"
            Invalid IPv6 Address:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid format: ipv6Address"
            Invalid Port Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Invalid value: ipv4Address.publicPort"
            Invalid QueryType Value:
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "The value of queryType can only be IMEIBIND,AREALIMIT"
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
                      - AUTHENTICATION_REQUIRED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials.
            GENERIC_401_AUTHENTICATION_REQUIRED:
              description: New authentication is needed, authentication is no longer valid
              value:
                status: 401
                code: AUTHENTICATION_REQUIRED
                message: New authentication is required.
    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
    Bind422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - IDENTIFIER_MISMATCH
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
                      - UNNECESSARY_UNBIND_IMEI
                      - UNNECESSARY_UNBIND_AREALIMIT
          examples:
            Identifiers Do Not Match:
              description: Multiple identifiers provided which do not all identify the same device
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            Unsupported Identifier:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: None of the provided identifiers is supported by the implementation.
            Unnecessary Identifier:
              description: An explicit identifier has been provided for the device when this is already identified by the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: An explicit identifier has been provided for the device when this is already identified by the access token
            Missing Identifier:
              description: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
            Unnecessary Unbind BINDIMEI:
              description: The IMEI of the current device has been unbound, there is no need to unbind it again
              value:
                status: 422
                code: UNNECESSARY_UNBIND_IMEI
                message: The current device imei has been unbound
            Unnecessary Unbind AREALIMIT:
              description: The area limit of the current device has been unbound, there is no need to unbind it again
              value:
                status: 422
                code: UNNECESSARY_UNBIND_AREALIMIT
                message: The current device area limit has been unbound
    Unbind422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - IDENTIFIER_MISMATCH
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
                      - UNNECESSARY_UNBIND_IMEI
                      - UNNECESSARY_UNBIND_AREALIMIT
          examples:
            Identifiers Do Not Match:
              description: Multiple identifiers provided which do not all identify the same device
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            Unsupported Identifier:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: None of the provided identifiers is supported by the implementation.
            Unnecessary Identifier:
              description: An explicit identifier has been provided for the device when this is already identified by the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: An explicit identifier has been provided for the device when this is already identified by the access token
            Missing Identifier:
              description: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
            Unnecessary Unbind BINDIMEI:
              description: The IMEI of the current device has been unbound, there is no need to unbind it again
              value:
                status: 422
                code: UNNECESSARY_UNBIND_IMEI
                message: The current device imei has been unbound
            Unnecessary Unbind AREALIMIT:
              description: The area limit of the current device has been unbound, there is no need to unbind it again
              value:
                status: 422
                code: UNNECESSARY_UNBIND_AREALIMIT
                message: The current device area limit has been unbound
    Subscribe422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - IDENTIFIER_MISMATCH
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            Identifiers Do Not Match:
              description: Multiple identifiers provided which do not all identify the same device
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            Unsupported Identifier:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: None of the provided identifiers is supported by the implementation.
            Unnecessary Identifier:
              description: An explicit identifier has been provided for the device when this is already identified by the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: An explicit identifier has been provided for the device when this is already identified by the access token
            Missing Identifier:
              description: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: An identifier is not included in the request and the device cannot be identified from the 2-legged access token


    Query422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - IDENTIFIER_MISMATCH
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            Identifiers Do Not Match:
              description: Multiple identifiers provided which do not all identify the same device
              value:
                status: 422
                code: IDENTIFIER_MISMATCH
                message: Provided identifiers are not consistent.
            Unsupported Identifier:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: None of the provided identifiers is supported by the implementation.
            Unnecessary Identifier:
              description: An explicit identifier has been provided for the device when this is already identified by the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: An explicit identifier has been provided for the device when this is already identified by the access token
            Missing Identifier:
              description: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: An identifier is not included in the request and the device cannot be identified from the 2-legged access token
    Callback410:
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 410
                  code:
                    enum:
                      - GONE
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate that its callback is no longer available
              value:
                status: 410
                code: GONE
                message:
                  Access to the target resource is no longer available.
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 429
                  code:
                    enum:
                      - QUOTA_EXCEEDED
                      - TOO_MANY_REQUESTS
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Rejected due to exceeding a business quota limit.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: API Server request limit is overpassed
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Rejected due to request rate limit overpassed.









































             
